#!/usr/bin/env python

import os
import shutil
import click
from jinja2 import Environment, FileSystemLoader
from jinja2.ext import Extension

class RawExtension(Extension):
    options = {}
    file_extensions = ['.css', '.js', 'svg']

    def preprocess(self, source, name, filename=None):
        if (not name or
           (name and not os.path.splitext(name)[1] in self.file_extensions)):
            return source
        return "{% raw %}"+source+"{% endraw %}"


@click.command()
@click.option('--path', '-p', default=".",
              help='Use PATH instead of the current working directory.',
              type=click.Path(exists=True))
@click.option('--outfile', '-o', default="index.html",
              help='Write result to PATH instead of index.html.',
              type=click.Path())
@click.option('--title', '-t', default="Prauser",
              help='Use TEXT as title on the navigation bar.')
@click.option('--copy', '-c',
              help='Copy template to input path.', is_flag=True)
@click.option('--embed', '-e', default=False,
              help='Embed css and js code in the generated html.', is_flag=True)
@click.option('--cdn', default=False,
              help='Use cdn for third party resources.', is_flag=True)
@click.option('--template', default="default",
              help='Select one template')
@click.option('--verbose', '-v', default=False,
              help='Enable verbose mode.', is_flag=True)
def cli(path, outfile, title, copy, embed, cdn, template, verbose):
    items_root = get_items(path)

    BASE_DIR = os.path.dirname(__file__)

    env = Environment(
        loader=FileSystemLoader(os.path.join(BASE_DIR, 'templates', template)),
        extensions=["pyjade.ext.jinja.PyJadeExtension", RawExtension],
    )
    try:
        tpl = env.get_template('index.jinja')
    except Exception:
        try:
            tpl = env.get_template('index.jade')
        except Exception:
            click.echo("Template not found", err=True)
            return

    with open(outfile, "w") as out:
        out.write(tpl.render(
            root=items_root,
            title=title,
            embed=embed,
            cdn=cdn
        ))

    if copy:
        shutil.copytree(os.path.join(BASE_DIR, "templates", template), os.path.join(os.path.dirname(outfile), "template"))


def get_items(path):
    root_item = {"is_folder": True, "name": "Root", "children": []}
    folders = {}

    for root, dirs, files in os.walk(path):
        if root == path:
            current_item = root_item
        else:
            current_item = folders[root]

        for item in sorted(dirs):
            url = os.path.join(root, item)
            folder_item = {
                "is_folder": True,
                "name": item,
                "url": url,
                "children": []
            }
            current_item["children"].append(folder_item)
            folders[os.path.join(root, item)] = folder_item

        for item in sorted(files):
            url = os.path.join(root, item)
            current_item["children"].append({
                "is_folder": False,
                "name": item,
                "url": url
            })

    return root_item


if __name__ == '__main__':
    cli()
